@model TicketVerkoop.ViewModels.ShoppingCartVM


@{
    ViewData["Title"] = "Index";
}

@if (User.Identity.IsAuthenticated)
{

    <h1>Mijn winkelmandje</h1>

    @if (Model != null && (Model.Reservations != null || Model.Subscriptions != null) && (Model.Reservations.Count != 0 || Model.Subscriptions.Count != 0))
    {
<form asp-action="Payment">
    @{ float totalPrice = 0;}
    @if (Model.Reservations != null && Model.Reservations.Count != 0)
    {
        <h2>Matchen</h2>
        <span class="text-danger">@Html.ValidationMessage("error")</span>
        <table>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Reservations[0].HomeTeam)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Reservations[0].AwayTeam)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Reservations[0].SectionName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Reservations[0].NumberOfTickets)
                </th>
                <th>
                    € Prijs
                </th>
                <th>
                    € Subtotaal
                </th>
            </tr>

            @for (var i = 0; i < Model.Reservations.Count; i++)
            {

                <tr>
                    @Html.HiddenFor(m => Model.Reservations[i].MatchId)
                    @Html.HiddenFor(m => Model.Reservations[i].MatchDate)
                    @Html.HiddenFor(m => Model.Reservations[i].MatchSectionId)
                    @Html.HiddenFor(m => Model.Reservations[i].ReservationDate)
                    <td>
                        <input asp-for="@Model.Reservations[i].HomeTeam" readonly="readonly"
                               class="form-control" />

                    </td>
                    <td>
                        <input asp-for="@Model.Reservations[i].AwayTeam" readonly="readonly"
                               class="form-control" />

                    </td>
                    <td>
                        <input asp-for="@Model.Reservations[i].SectionName" readonly="readonly"
                               class="form-control" />

                    </td>
                    <td>
                        <input asp-for="@Model.Reservations[i].NumberOfTickets" type="number"
                               min="1" max="10" data-aantal=@i class="form-control" />

                    </td>
                    <td>
                        <input asp-for="@Model.Reservations[i].Price"
                               readonly="readonly" class="form-control" />

                        @{
                            var subtotaal = Model.Reservations[i].Price * Model.Reservations[i].NumberOfTickets;
                            totalPrice += (float)subtotaal;
                        }
                    </td>
                    <td>
                        <input id="@("txtSubTotal" + @i)"
                               value="@subtotaal"
                               readonly="readonly" class="form-control" />
                    </td>
                    <td>
                        <a asp-controller="ShoppingCart"
                           asp-action="DeleteReservation"
                           asp-route-matchSectionId="@Model.Reservations[i].MatchSectionId">
                            <img src="~/images/Delete_Icon.png" />
                        </a>
                    </td>
                </tr>
            }
        </table>
    }
    @if (Model.Subscriptions != null && Model.Subscriptions.Count != 0)
    {
        <h2 id="abonnementenHeader">Abonnementen</h2>
        <table>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Subscriptions[0].SeasonStartDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Subscriptions[0].SeasonEndDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Subscriptions[0].TeamName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Subscriptions[0].SectionName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Subscriptions[0].Price)
                </th>
                <th>
                    Subtotaal
                </th>
            </tr>
            @for (var i = 0; i < Model.Subscriptions.Count; i++)
            {

                <tr>
                    @Html.HiddenFor(m => Model.Subscriptions[i].TeamId)
                    @Html.HiddenFor(m => Model.Subscriptions[i].SectionId)
                    <td>
                        <input asp-for="@Model.Subscriptions[i].SeasonStartDate" readonly="readonly"
                               class="form-control" />

                    </td>
                    <td>
                        <input asp-for="@Model.Subscriptions[i].SeasonEndDate" readonly="readonly"
                               class="form-control" />

                    </td>
                    <td>
                        <input asp-for="@Model.Subscriptions[i].TeamName" readonly="readonly"
                               class="form-control" />

                    </td>
                    <td>
                        <input asp-for="@Model.Subscriptions[i].SectionName" class="form-control" />

                    </td>
                    <td>
                        <input asp-for="@Model.Subscriptions[i].Price
                               readonly="readonly" class="form-control" />
                        @{
                            var subtotaal = Math.Round((double)Model.Subscriptions[i].Price, 2);
                            totalPrice += (float)subtotaal;
                        }
                    </td>
                    <td>
                        <input id="@("txtSubTotal" + @i)"
                               value="@subtotaal"
                               readonly="readonly" class="form-control" />
                    </td>
                    <td>
                        <a asp-controller="ShoppingCart"
                           asp-action="DeleteSubscription"
                           asp-route-teamId="@Model.Subscriptions[i].TeamId">
                            <img src="~/images/Delete_Icon.png" />
                        </a>
                    </td>
                </tr>
            }
        </table>
    }
    @if ((Model.Reservations != null && Model.Reservations.Count != 0) || (Model.Subscriptions != null && Model.Subscriptions.Count != 0))
    {
        <div id="btnCheckOut">
            <input type="submit" text value="Check Out" class="reservationButton">
        </div>
        <div id="cart-total">
            Totaal  €<input id="txtTotal" value="@totalPrice"
                          type="number" readonly="readonly" />
        </div>
    }
</form>

    }
    else
    {
        @Html.Raw("Uw Winkelmandje is momenteel leeg.")}
    <a asp-controller="Home"
       asp-action="Index">
        Keer terug naar het hoofdscherm
    </a>
}

else
{
    @await Html.PartialAsync("DisplayTemplates/_NotLoggedInView")
}



@section Scripts {

    <script>

        $(() => {
            //selecteer alle input elementen die eindigen met NumberOfTickets
            $("[id$=NumberOfTickets]").on('change', (e) => {

                let elementNumber = $(e.currentTarget).data("aantal");

                let amountString = $(e.currentTarget).val();

                // controleer ofdat input een geheel getal is
                if (parseInt(amountString) == parseFloat(amountString)) {
                    let amount = parseInt(amountString);

                    let priceObject = $("#Reservations_" + elementNumber + "__Price");
                    let priceString = priceObject.val();

                    // het getal wordt bij parseFloat afgrond wanneer er een komma gebruikt wordt, bij een punt gebeurt dit niet
                    let hasComma = priceObject.val().includes(",");
                    if (hasComma) {
                        priceString = priceString.replace(",", ".");
                    }

                    let price = parseFloat(priceString)

                    let subTotal = (amount * price).toString();

                    if (hasComma) {
                        subTotal = subTotal.replace(".", ",")
                    }
                    $("#txtSubTotal" + elementNumber).val(subTotal);

                    $('#txtTotal').val(calculateTotal());
                }
            });

            const calculateTotal = () => {
                let total = 0;
                $('[id^=txtSubTotal]').each((index, element) => {
                    // convert string to number and add make sum
                    let subTotalString = $(element).val();

                    let hasComma = subTotalString.includes(",");

                    if (hasComma) {
                        subTotalString = subTotalString.replace(",", ".");
                    }
                    total += parseFloat(subTotalString);
                });
                return total
            }
        });
    </script>
}




